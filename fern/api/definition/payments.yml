# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml
  client: client-session.yml

services:
  http:
    PaymentsService:
      base-path: /payments
      auth: true
      headers:
        X-Idempotency-Key: 
          type: optional<string>
          name: idempotencyKey
      endpoints:
        search:
          docs: |
            Search and retrieve a list of your payments. 
            Results are paginated, they will only return up to 100 payments maximum. 
            To access the next page of result, set the cursor query parameter to the value of nextCursor in your current result payload. 
            Use prevCursor to go back to the previous page.
            Payments will be available within a minute from being created.
          method: GET
          path: /
          query-parameters:
            status:
              type: optional<string>
              docs: Filter payments by their status. For example, "FAILED,CANCELLED‚Äù
            payment_method_type:
              type: optional<string>
              docs: Filter payments by their payment method type. For example, "PAYMENT_CARD,APPLE_PAY"
            processor:
              type: optional<string>
              docs: Filter payments by their payment processor. For example, "Stripe,Braintree"
            currency_code:
              type: optional<commons.CurrencyCode>
              docs: Filter payments by their payment currency. For example, "USD,EUR" for US dollars and Euro
            from_date:
              type: optional<datetime>
              docs: Return only payments from this date (inclusive).
            to_date:
              type: optional<datetime>
              docs: Return only payments up to this date (inclusive).
            order_id:
              type: optional<string>
              docs: Return payments related to this order ID.
            min_amount:
              type: optional<integer>
              docs: Return payments of this amount minimum (inclusive).
            max_amount:
              type: optional<integer>
              docs: Return payments of this amount max (inclusive).
            customer_id:
              type: optional<commons.CustomerId> 
              docs: ID of the customer that has made the payment. For example, "anna-123,dirk-456"
            merchant_id:
              type: optional<commons.MerchantId>
              docs: ID of the merchant involved in the payment.
            customer_email_address:
              type: optional<string> 
              docs: Email of the customer that has made the payment. For example, "mary@gm.com,ginni@ibm.com"
            last_4_digits:
              type: optional<string> 
              docs: Last 4 digits of the card used for the payment. For example, "4839,8709"
            paypal_email:
              type: optional<string> 
              docs: Paypal email address associated with the payment. For example, "mary@gm.com,ginni@ibm.com"
            klarna_email:
              type: optional<string>
              docs: Klarna email address associated with the payment. "mary@gm.com,ginni@ibm.com"
            limit:
              type: optional<integer>
              docs: Maximum number of payments to return per page. Between 1 and 100.
            cursor:
              type: optional<integer>
              docs: If results are paginated, pass the nextCursor to access next page.
          response: PaymentsData

        create:
          docs: |
            Create and authorize a payment for a given customer order. 
            You should provide a payment method token here to avoid PCI implications.
            If only a payment method token is passed, the values passed with the Client Session is used to determine the amount, currency etc.
            Note: amount, currencyCode and orderId are required during payment creation.
            Make sure to pass these fields when creating a client session, or if not yet available, when creating a payment.
            All fields provided on this request will take preference over any field on the order associated with the client session. 
            E.g. if you pass amount on this request, it will override the amount on the order associated with the Client Session.
          method: POST
          path: /
          request: CreatePaymentRequest
          response: PaymentResponse

        capture:
          docs: |
            If you have successfully authorized a payment, you can now
            fully capture, or partially capture funds from the authorized payment, depending
            on whether your selected payment processor supports it. The payment will
            be updated to SETTLED or SETTLING, depending on the payment method type.

            The payload sent in this capture request is completely optional. If you don't
            send a payload with the capture request, the full amount that was authorized
            will be sent for capture. Below are the available payload attributes, which
            give you more granular control when capturing funds, if you require it.
          method: POST
          path: /{id}/capture
          path-parameters:
            id:
              type: PaymentId
              docs: ID of the payment to capture.
          request: CapturePaymentRequest
          response: PaymentResponse

        cancel:
          docs: | 
            Provided the payment has not reached `SETTLED` status, Primer will
            send a "void" request to the payment processor, thereby cancelling the payment
            and releasing the hold on customer funds. Upon success, the payment will transition
            to `CANCELLED`. The payload is optional.
          method: POST
          path: /{id}/cancel
          path-parameters:
            id:
              type: PaymentId
              docs: ID of the payment to cancel.
          request: CancelPaymentRequest
          response: PaymentResponse

        refund: 
          docs: By default, this request will refund the full amount. Optionally, pass in a lesser amount for a partial refund.
          method: POST 
          path: /{id}/refund
          path-parameters:
            id:
              type: PaymentId
              docs: ID of the payment to refund.
          request: RefundPaymentRequest
          response: PaymentResponse

        resume: 
          docs: |
            Resume a payment's workflow execution from a paused state.
            This is usually required when a Workflow was paused in order to get further information
            from the customer, or when waiting for an asynchronous response from a third party connection.
          method: POST 
          path: /{id}/resume
          path-parameters:
            id:
              type: PaymentId 
              docs: ID of the payment to resume.
          request: ResumePaymentRequest
          response: PaymentResponse

        get: 
          docs: Retrieve a payment by its ID.
          method: GET 
          path: /{id}/resume
          path-parameters:
            id:
              type: PaymentId 
              docs: ID of the payment to retrieve.
          response: PaymentResponse

types:
  PaymentId:
    alias: string
    docs: The unique payment ID.

  PaymentsData:
    properties:
      data: list<SearchPaymentResponse>
      nextCursor: optional<string>
      prevCursor: optional<string>

  SearchPaymentResponse:
    properties:
      id:
        type: PaymentId
        docs: You can use this ID to retrieve the payment details or perform downstream operations.
      date:
        type: datetime
        docs: The date and time at which the payment was created in UTC format.
      status:
        type: PaymentStatus
        docs: As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response, through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are mapped to these. An additional message, in the field processor may also be included that details the reason for the state, primarily on failure states.
      orderId:
        type: commons.OrderId
        docs: Your reference for the payment.
      processor:
        type: optional<Processor>
        docs: The payment processor used for this payment.
      currencyCode:
        type: commons.CurrencyCode
        docs: The 3-letter currency code in ISO 4217 format. e.g. use USD for US dollars.
      amount:
        type: integer
        docs: The payment amount, in minor units. e.g. $7 would show as 700.
      metadata:
        type: optional<map<string, unknown>>
        docs: |
          Additional data to be used throughout the payment lifecycle.
          A dictionary of key-value pairs where the values can only be strings or integers.
          e.g. {"productId": 1001, "merchantId": "a13bsd62s"}

  PaymentStatus:
    enum:
      - value: PENDING
        docs: The payment has been created by Primer but not yet authorized.
      - value: FAILED
        docs: The processor failed to process this payment.
      - value: AUTHORIZED
        docs: The payment is authorized and awaiting capture.
      - value: SETTLING
        docs: The payment has been submitted for settlement and funds will be settled later.
      - value: PARTIALLY_SETTLED
        docs: The payment has been partially settled.
      - value: SETTLED
        docs: Funds have been settled into your account.
      - value: DECLINED
        docs: This payment was declined by the processor, either at a gateway or acquirer level. See the `reason` object in your response payload for more details.
      - value: CANCELLED
        docs: The payment was cancelled prior to it being settled.

  CreatePaymentRequest:
    properties:
      orderId:
        type: optional<commons.OrderId>
        docs: Your reference for the payment.
      currencyCode:
        type: optional<commons.CurrencyCode>
        docs: |
          The 3-letter currency code in ISO 4217 format.
          e.g. use USD for US dollars.
      amount:
        type: optional<integer>
        docs: The amount you would like to charge the customer, in minor units. e.g. for $7, use 700. Some currencies, such as Japanese Yen, do not have minor units. In this case you should use the value as it is, without any formatting. For example for ¬•100, use 100.
      order:
        type: optional<client.OrderDetails>
        docs: More information associated with the order.
      paymentMethodToken:
        type: string
        docs: The payment method token used to authorize the payment.
      customerId:
        type: optional<commons.CustomerId>
        docs: A unique identifier for your customer. This attribute is required if `paymentMethod.vaultOnSuccess` is set to True.
      customer:
        type: optional<client.CustomerDetails>
        docs: More information associated with the customer.
      metadata:
        type: optional<map<string, unknown>>
        docs: |
          Additional data to be used throughout the payment lifecycle.
          A dictionary of key-value pairs where the values can only be strings or integers.
          e.g. {"productId": 1001, "merchantId": "a13bsd62s"}
      paymentMethod:
        type: optional<client.ClientPaymentMethod>
        docs: Enable certain options associated with the payment method.

  PaymentResponse:
    properties:
      id:
        type: optional<PaymentId>
        docs: Use this ID to retrieve the payment details or perform downstream operations.
      date:
        type: optional<datetime>
        docs: The date and time at which the payment was created in UTC format.
      status:
        type: optional<PaymentStatus>
        docs: As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response, through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are mapped to these. An additional message, in the field processorMessage, from the processor may also be included that details the reason for the state, primarily on failure states.
      orderId:
        type: optional<commons.OrderId>
        docs: Your reference for the payment.
      customerId:
        type: optional<string>
        docs: The unique identifier for your customer.
      currencyCode:
        type: optional<commons.CurrencyCode>
        docs: The 3-letter currency code in ISO 4217 format. e.g. use USD for US dollars.
      amount:
        type: optional<integer>
        docs: The payment amount, in minor units. e.g. $7 would show as 700.
      order:
        type: optional<client.CustomerDetails>
        docs: More information associated with the order.
      countryCode:
        type: optional<commons.CountryCode>
        docs: The country in which the order is created
      fees:
        type: optional<list<client.Fee>>
        docs: The details of fees charged.
      shipping:
        type: optional<client.ShippingDetails>
        docs: The details of shipping charged.
      paymentMethod:
        type: PaymentMethod
        docs: The payment method options provided in the request, as well as the token used to process the payment.
      requiredAction:
        type: optional<RequiredAction>
        docs: Required action to perform in order to resume the payment workflow. This can be requiring a 3DS check from the customer for instance.
      statusReason:
        type: optional<StatusReason>
        docs: Check this field for more information regarding the payment's status. This is especially useful when the status is `DECLINED` or `FAILED`.
      transactions:
        type: list<Transaction>
        docs: A list summarizing the transactions that occurred while processing the payment.
      processor:
        type: optional<Processor>
        docs: More information associated with the payment processor, including the processor name.
      customer:
        type: optional<client.CustomerDetails>
        docs: More information associated with the customer.
      metadata:
        type: optional<map<string,unknown>>
        docs: Additional data to be used throughout the payment lifecycle.

  PaymentMethod:
    union:
      PAYMENT_CARD: PaymentCardSchema
      PAYPAL_ORDER: PayPalOrderSchema
      PAYPAL_BILLING: PayPalBillingAgreementSchema
      GO_CARDLESS: GoCardlessMandateSchema
      KLARNA_PAYMENT_SESSION: KlarnaPaymentSessionSchema
      KLARNA_CUSTOMER_TOKEN: KlarnaCustomerTokenSchema
      IDEAL_PAY_NL_TOKEN: IdealPayNLTokenSchema
      APAYA_CUSTOMER_TOKEN: ApayaCustomerTokenSchema
    discriminant: paymentMethodType

  PaymentCardSchema:
    properties:
      paymentMethodData: PaymentCardTokenAPISchema
      descriptor:
        type: optional<string>
        docs: The description of the payment, as it would typically appear on a bank statement.
      paymentMethodToken:
        type: optional<string>
        docs: The payment method token used to authorize the transaction.
      isVaulted:
        type: optional<boolean>
        docs: Whether the payment method token represents a vaulted payment method and can be used for future payments.
      analyticsId:
        type: optional<string>
        docs: Unique analytics identifier corresponding to a payment method
      threeDSecureAuthentication: optional<ThreeDSecureAuthentication>

  PaymentCardTokenAPISchema: 
    properties:
      first6Digits: optional<string>
      last4Digits: string
      expirationMonth: string
      expirationYear: string
      cardholderName: optional<string>
      network: optional<string>
      isNetworkTokenized: optional<boolean>
      binData: optional<BinData>

  BinData:
    properties:
      network: commons.CardNetworkType
      issuerCountryCode: optional<commons.CountryCode>
      issuerName: optional<string>
      issuerCurrencyCode: optional<commons.CurrencyCode>
      regionalRestriction: RegionalRestriction
      accountNumberType: AccountNumberType
      accountFundingType: commons.AccountFundingType
      prepaidReloadableIndicator: PrepaidReloadableIndicator
      productUsageType: ProductUsageType
      productCode: string
      productName: string

  RegionalRestriction:
    enum:
      - DOMESTIC_USE_ONLY
      - NONE
      - UNKNOWN

  AccountNumberType:
    enum:
      - PRIMARY_ACCOUNT_NUMBER
      - NETWORK_TOKEN
      - UNKNOWN

  PrepaidReloadableIndicator:
    enum:
      - RELOADABLE
      - NON_RELOADABLE
      - NOT_APPLICABLE
      - UNKNOWN

  ProductUsageType:
    enum:
      - CONSUMER
      - BUSINESS
      - GOVERNMENT
      - UNKNOWN

  PayPalOrderSchema:
    properties:
      paymentMethodData: PayPalOrderTokenAPISchema
      descriptor:
        type: optional<string>
        docs: The description of the payment, as it would typically appear on a bank statement.
      paymentMethodToken:
        type: optional<string>
        docs: The payment method token used to authorize the transaction.
      isVaulted:
        type: optional<boolean>
        docs: Whether the payment method token represents a vaulted payment method and can be used for future payments.
      analyticsId:
        type: optional<string>
        docs: Unique analytics identifier corresponding to a payment method
      threeDSecureAuthentication: optional<ThreeDSecureAuthentication>

  PayPalOrderTokenAPISchema:
    properties:
      paypalOrderId: string
      externalPayerInfo: ExternalPayerInfo
      paypalStatus: optional<string>

  ExternalPayerInfo:
    properties:
      externalPayerId: optional<string>
      email: optional<string>
      firstName: optional<string>
      lastName: optional<string>

  PayPalBillingAgreementSchema:
    properties:
      paymentMethodData: PayPalBillingAgreementAPISchema
      descriptor:
        type: optional<string>
        docs: The description of the payment, as it would typically appear on a bank statement.
      paymentMethodToken:
        type: optional<string>
        docs: The payment method token used to authorize the transaction.
      isVaulted:
        type: optional<boolean>
        docs: Whether the payment method token represents a vaulted payment method and can be used for future payments.
      analyticsId:
        type: optional<string>
        docs: Unique analytics identifier corresponding to a payment method
      threeDSecureAuthentication: optional<ThreeDSecureAuthentication>

  PayPalBillingAgreementAPISchema:
    properties:
      paypalBillingAgreementId: string
      externalPayerInfo:
        type: optional<ExternalPayerInfo>
        docs: Information about the PayPal customer
      shippingAddress:
        type: optional<commons.ShippingAddress>
        docs: The PayPal customer's shipping address
      paypalStatus: optional<string>

  GoCardlessMandateSchema:
    properties:
      paymentMethodData: GoCardlessMandateAPISchema
      descriptor:
        type: optional<string>
        docs: The description of the payment, as it would typically appear on a bank statement.
      paymentMethodToken:
        type: optional<string>
        docs: The payment method token used to authorize the transaction.
      isVaulted:
        type: optional<boolean>
        docs: Whether the payment method token represents a vaulted payment method and can be used for future payments.
      analyticsId:
        type: optional<string>
        docs: Unique analytics identifier corresponding to a payment method
      threeDSecureAuthentication: optional<ThreeDSecureAuthentication>

  GoCardlessMandateAPISchema:
    properties:
      gocardlessMandateId:
        type: string
        docs: Unique identifier of a GoCardless mandate agreement

  KlarnaPaymentSessionSchema:
    properties:
      paymentMethodData: KlarnaPaymentSessionAPISchema
      descriptor:
        type: optional<string>
        docs: The description of the payment, as it would typically appear on a bank statement.
      paymentMethodToken:
        type: optional<string>
        docs: The payment method token used to authorize the transaction.
      isVaulted:
        type: optional<boolean>
        docs: Whether the payment method token represents a vaulted payment method and can be used for future payments.
      analyticsId:
        type: optional<string>
        docs: Unique analytics identifier corresponding to a payment method
      threeDSecureAuthentication: optional<ThreeDSecureAuthentication>

  KlarnaPaymentSessionAPISchema:
    properties:
      klarnaAuthorizationToken: string
      sessionData: KlarnaSessionDetails

  KlarnaSessionDetails:
    properties:
      recurringDescription: optional<string>
      billingAddress: KlarnaAddress
      shippingAddress: optional<KlarnaAddress>
      purchaseCountry: string
      purchaseCurrency: string
      locale: string
      orderLines: list<unknown>
      tokenDetails: optional<KlarnaTokenDetails>

  KlarnaAddress:
    properties:
      title: optional<string>
      email: optional<string>
      phoneNumber: optional<string>
      firstName: optional<string>
      lastName: optional<string>
      addressLine1: optional<string>
      addressLine2: optional<string>
      addressLine3: optional<string>
      city: optional<string>
      state: optional<string>
      countryCode: optional<commons.CountryCode>
      postalCode: optional<string>

  KlarnaTokenDetails:
    properties:
      type: string
      brand: optional<string>
      masked_number: optional<string>
      expiry_date: optional<string>

  KlarnaCustomerTokenSchema:
    properties:
      paymentMethodData: KlarnaCustomerTokenAPISchema
      descriptor:
        type: optional<string>
        docs: The description of the payment, as it would typically appear on a bank statement.
      paymentMethodToken:
        type: optional<string>
        docs: The payment method token used to authorize the transaction.
      isVaulted:
        type: optional<boolean>
        docs: Whether the payment method token represents a vaulted payment method and can be used for future payments.
      analyticsId:
        type: optional<string>
        docs: Unique analytics identifier corresponding to a payment method
      threeDSecureAuthentication: optional<ThreeDSecureAuthentication>

  KlarnaCustomerTokenAPISchema:
    properties:
      klarnaCustomerToken: string
      sessionData: KlarnaSessionDetails

  IdealPayNLTokenSchema:
    properties:
      paymentMethodData: KlarnaCustomerTokenAPISchema
      descriptor:
        type: optional<string>
        docs: The description of the payment, as it would typically appear on a bank statement.
      paymentMethodToken:
        type: optional<string>
        docs: The payment method token used to authorize the transaction.
      isVaulted:
        type: optional<boolean>
        docs: Whether the payment method token represents a vaulted payment method and can be used for future payments.
      analyticsId:
        type: optional<string>
        docs: Unique analytics identifier corresponding to a payment method
      threeDSecureAuthentication: optional<ThreeDSecureAuthentication>

  IdealPayNLTokenAPISchema:
    properties:
      paymentMethodConfigId: string

  ApayaCustomerTokenSchema:
    properties:
      paymentMethodData: KlarnaCustomerTokenAPISchema
      descriptor:
        type: optional<string>
        docs: The description of the payment, as it would typically appear on a bank statement.
      paymentMethodToken:
        type: optional<string>
        docs: The payment method token used to authorize the transaction.
      isVaulted:
        type: optional<boolean>
        docs: Whether the payment method token represents a vaulted payment method and can be used for future payments.
      analyticsId:
        type: optional<string>
        docs: Unique analytics identifier corresponding to a payment method
      threeDSecureAuthentication: optional<ThreeDSecureAuthentication>

  ApayaCustomerTokenAPISchema:
    properties:
      mx: string
      mnc: optional<integer>
      mcc: optional<integer>

  ThreeDSecureAuthentication:
    properties:
      responseCode: SecureAuthenticationResponseCode
      reasonCode: optional<ThreeDSecureReasonCode>
      reasonText: optional<string>
      protocolVersion: optional<string>
      challengeIssued: optional<boolean>

  SecureAuthenticationResponseCode:
    enum:
      - NOT_PERFORMED
      - SKIPPED
      - AUTH_SUCCESS
      - AUTH_FAILED
      - CHALLENGE_METHOD

  ThreeDSecureReasonCode:
    union:
      Skipped: ThreeDSecureSkippedReasonCodeEnum
      Failed: ThreeDSecureFailedReasonCodeEnum

  ThreeDSecureSkippedReasonCodeEnum:
    enum:
      - GATEWAY_UNAVAILABLE
      - DISABLED_BY_MERCHANT
      - NOT_SUPPORTED_BY_ISSUER
      - FAILED_TO_NEGOTIATE
      - UNKNOWN_ACS_RESPONSE
      - value: 3DS_SERVER_ERROR
        name: THREE_DS_SERVER_ERROR
      - ACQUIRER_NOT_CONFIGURED
      - ACQUIRER_NOT_PARTICIPATING

  ThreeDSecureFailedReasonCodeEnum:
    enum:
      - value: "01"
        name: Card_authentication_failed
      - value: "02"
        name: Unknown_Device
      - value: "03"
        name: Unsupported_Device
      - value: "04"
        name: Exceeds_authentication_frequency_limit
      - value: "05"
        name: Expired_card
      - value: "06"
        name: Invalid_card_number
      - value: "07"
        name: Invalid_transaction
      - value: "08"
        name: No_Card_record
      - value: "09"
        name: Security_failure
      - value: "10"
        name: Stolen_card
      - value: "11"
        name: Suspected_fraud
      - value: "12"
        name: Transaction_not_permitted_to_cardholder
      - value: "13"
        name: Cardholder_not_enrolled_in_service
      - value: "14"
        name: Transaction_timed_out_at_the_ACS
      - value: "15"
        name: Low_confidence
      - value: "16"
        name: Medium_confidence

  Processor:
    properties:
      name:
        type: optional<string>
        docs: The payment processor used for this payment.
      processorMerchantId:
        type: optional<string>
        docs: The merchant ID registered at the payment processor used for this payment.
      amountCaptured:
        type: optional<integer>
        docs: |
          If no capture was performed, this value will be set to 0. 
          If one or more partial captures were performed, this value will be a sum of all partial capture amounts.
      amountRefunded:
        type: optional<integer>
        docs: |
          If no refund was performed, this value will be set to 0.
          If one or more partial refunds were performed, this value will be a sum of all partial refund amounts.

  RequiredAction:
    properties:
      name:
        type: string
        docs: Action name. 3DS_AUTHENTICATION USE_PRIMER_SDK
      description:
        type: string
        docs: Human description of the required action to perform.
      clientToken:
        type: optional<string>
        docs: If the action requires customer data, instantiate the checkout SDK with this client session token to resume the session.

  StatusReason:
    docs: Check this field for more information regarding the payment's status. This is especially useful when the status is `DECLINED` or `FAILED`.
    properties:
      type: StatusReasonType
      declineType:
        type: optional<StatusReasonDeclineType>
        docs: If the error is of type `ISSUER_DECLINED` this will be returned. Declines of type `SOFT_DECLINE` may be retried, whereas declines of type `HARD_DECLINE` should not be retried.
      code:
        type: optional<StatusReasonCode>
        docs: If the error is of type `ISSUER_DECLINED`, this will be returned.
      message:
        type: optional<string>
        docs: In case of an error on the processor's part, we will return the message returned by the processor. This is usually a human readable error.

  StatusReasonType:
    enum:
      - APPLICATION_ERROR
      - GATEWAY_REJECTED
      - ISSUER_DECLINED

  StatusReasonDeclineType:
    enum:
      - SOFT_DECLINE
      - HARD_DECLINE

  StatusReasonCode:
    enum:
      - ERROR
      - INVALID_CARD_NUMBER
      - EXPIRED_CARD
      - LOST_OR_STOLEN_CARD
      - SUSPECTED_FRAUD
      - UNKNOWN_DECLINED
      - REFER_TO_CARD_ISSUER
      - DO_NOT_HONOR
      - INSUFFICIENT_FUNDS
      - WITHDRAWAL_LIMIT_EXCEEDED
      - ISSUER_TEMPORARILY_UNAVAILABLE
      - AUTHENTICATION_REQUIRED

  Transaction:
    properties:
      date:
        type: string
        docs: Date & time of the transaction (UTC)
      amount:
        type: integer
        docs: Transaction amount in minor units
      currencyCode:
        type: commons.CurrencyCode
        docs: The 3-letter currency code in ISO 4217 format. e.g. use USD for US dollars.
      type: optional<TransactionType>
      processorTransactionId:
        type: optional<string>
        docs: Processor's unique identifier for the transaction
      processorName:
        type: optional<string>
        docs: An identifier of a processor.
      processorMerchantId:
        type: string
        docs: |
          Processor's main account identifier:
            * Adyen: Account code
            * Braintree: Merchant ID
            * Stripe: Account ID"
      processorStatus: optional<PaymentStatus>
      processorStatusReason:
        docs: If the transaction has a declined or failed status. Only if the status is `DECLINED` or `FAILED`, otherwise null.
        type: optional<PaymentProcessorError>

  TransactionType:
    enum:
      - SALE
      - REFUND

  PaymentProcessorError:
    properties:
      type:
        type: StatusReasonType
        docs: Type of the status.
      declineType:
        type: optional<StatusReasonDeclineType>
        docs: If the error is of type `ISSUER_DECLINED` this will be returned. Declines of type `SOFT_DECLINE` may be retried, whereas declines of type `HARD_DECLINE` should not be retried.
      code:
        type: optional<StatusReasonCode>
        docs: If the error is of type `ISSUER_DECLINED`, this will be returned.
      message:
        type: optional<string>
        docs: In case of an error on the processor's part, we will return the message returned by the processor. This is usually a human readable error.

  CapturePaymentRequest:
    properties:
      amount:
        type: optional<integer>
        docs: The amount you would like to capture, in minor units. The currency used on authorization is assumed. If no amount is specified it defaults to the full amount.
      final:
        type: optional<boolean>
        docs: Indicates whether the capture request is the final capture request. After a final capture, no subsequent captures are allowed.

  CancelPaymentRequest: 
    properties:
      reason: 
        type: optional<string>
        docs: You can optionally specify a reason for the cancellation. This is for your own records.

  RefundPaymentRequest: 
    properties:
      amount: 
        type: optional<integer>
        docs: The amount you would like to refund the customer, in minor units. e.g. for $7, use 700. Defaults to remaining non-refunded amount.
      orderId: 
        type: optional<string>
        docs: Optionally you can pass a specific order ID for the refund. By default this will be set to the original orderId given on payment creation.
      reason: 
        type: optional<string>
        docs: You can optionally specify a reason for the refund. This is for your own records.

  ResumePaymentRequest: 
    properties:
      resumeToken: 
        type: string 
        docs: A token containing any information that is sent back from the checkout to complete a blocked payment flow.